# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'cucumber/api_steps'
require 'capybara-screenshot/cucumber'
require 'vcr'
require 'capybara/poltergeist'

World(FactoryGirl::Syntax::Methods)


# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  if ENV['KEEPDATA'].present?
    DatabaseCleaner.strategy = DatabaseCleaner::NullStrategy
  else
    DatabaseCleaner.strategy = :truncation
  end
rescue NameError
  raise 'You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.'
end


# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature

class CustomTruncationStrategy < Cucumber::Rails::Database::TruncationStrategy
  def after
    super
    load Rails.root.join('db/static_seeds.rb')
  end
end
# this has effect for both non-js and js features
Cucumber::Rails::Database.javascript_strategy = CustomTruncationStrategy


Capybara.register_driver :chrome do |app|
  Capybara::Selenium::Driver.new(app, :browser => :chrome)
end

Capybara.register_driver :firefox do |app|
  Capybara::Selenium::Driver.new(app, :browser => :firefox)
end

Capybara.configure do |config|
  if ENV['BROWSER']
    config.javascript_driver = ENV['BROWSER'].to_sym
  else
    config.javascript_driver = :poltergeist
  end
end


VCR.configure do |c|
  c.ignore_hosts '127.0.0.1', 'localhost'
  c.hook_into :webmock
  c.cassette_library_dir = 'features/cassettes'
end


After do
  Timecop.return
end

Around('@aws_s3_request') do |scenario, block|
  puts 'Hallo test'
  block.call
  puts 'Fertig'
end
