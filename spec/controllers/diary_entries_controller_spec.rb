require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DiaryEntriesController, type: :controller do

  let(:report) { Report.current }
  let(:valid_attributes) {
    {
    report_id: report.id,
    release: 'debug',
    moment: 2.days.ago
    }
  }

  let(:valid_session) { {} }
  let(:params) { { report_id: report.id } }

  describe "GET #index" do
    it "assigns all diary_entries as @diary_entries" do
      diary_entry = DiaryEntry.create! valid_attributes
      get :index, params: params, session: valid_session
      expect(assigns(:diary_entries)).to eq([diary_entry])
    end

    it "assigns the diary entries that belong to the report" do
      report = create(:report)
      expected = create(:diary_entry, report: report)
      not_expected = create(:diary_entry)
      get :index, params: {report_id: report.id}
      diary_entries = assigns(:diary_entries)
      expect(diary_entries).to include(expected)
      expect(diary_entries).not_to include(not_expected)
    end
  end

  describe "GET #show" do
    it "assigns the requested diary_entry as @diary_entry" do
      diary_entry = DiaryEntry.create! valid_attributes
      get :show, params: params.merge({id: diary_entry.to_param}), session: valid_session
      expect(assigns(:diary_entry)).to eq(diary_entry)
    end
  end
end
